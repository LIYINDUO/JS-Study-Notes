- 1995 Brendan Eich of Netscape was tasked with writing a programming language for the browser.
It was initially named Mogae, later live scripts and finally javascript.

- At that time, there was another browser competitor Internet Explorer which was built by 
Microsoft. In order to compete with Netscape Microsoft reverse engineered Brendan 

- Now you've gotten some practice with a few new additions to javascript. It's time to practice a bit more with a project. 
Most of the things you built so far have been from scratch and that's a fantastic way to synthesize material and practice what you've learned so far.
But it's not what you'll be doing as a professional developer. 

- In many professional developer environments, you start working on a codebase that already exists and your first challenge is learning and reading code 
that other people have written. 

-- Refactoring means restructuring the existing code without changing its external behavior.

-- Recap Session1 => key points in ES2015: 
- The map data structure is useful when creating key value pairs and the keys that are not strings
- Sets are useful for creating unique data sets and do not require key value pairs 
- The ES2015 Promise constructor allows for creating promises and resolving an array of pormises with Promise.all
- Generators are valuable when creating functions or methods that can pause and resume at any time
- ES2015 provides a few useful methods for converting array like objects into arrays, making shallow copies of objects, and handling issues 
  with NaN and typeof number

-- Recap Session2 => key points in ES2016 TO 18 learnt so far: 
- ES2016 provides the ** operator and [].includes
- ES2017 provides helpful string methods and introduces async functions 
- The async/await keywords in ES2017 allow for writing synchronous looking functions that under the hood are asynchronous
- We can combine async functions with Promise.all to create readable synchronous "looking" code
- ES2018 provides the availability to use rest and spread operator on objects and not just arrays 
- ES2018 provides support to iterate through AsyncIterables